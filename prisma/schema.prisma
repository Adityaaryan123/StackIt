generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum VotableType {
  question
  answer
}

enum VoteType {
  up
  down
}

enum NotificationType {
  answer
  comment
  mention
  vote
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  avatarUrl     String?   @map("avatar_url")
  image         String?
  role          Role      @default(user)
  reputation    Int       @default(0)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  answers       Answer[]
  votes         Vote[]
  notifications Notification[]
}

model Question {
  id                String   @id @default(uuid())
  title             String
  content           String
  votes             Int      @default(0)
  views             Int      @default(0)
  hasAcceptedAnswer Boolean  @default(false) @map("has_accepted_answer")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  authorId String
  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers  Answer[]
  tags     QuestionTag[]
}

model Answer {
  id         String   @id @default(uuid())
  content    String
  votes      Int      @default(0)
  isAccepted Boolean  @default(false) @map("is_accepted")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  questionId String
  authorId   String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  usageCount  Int      @default(0) @map("usage_count")
  createdAt   DateTime @default(now()) @map("created_at")

  questions QuestionTag[]
}

model QuestionTag {
  questionId String
  tagId      String

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
}

model Vote {
  id          String      @id @default(uuid())
  votableType VotableType
  votableId   String
  voteType    VoteType
  createdAt   DateTime    @default(now()) @map("created_at")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, votableType, votableId])
  @@index([votableType, votableId], name: "idx_votes_votable")
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  message   String
  link      String
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, isRead], name: "idx_notifications_unread")
}
